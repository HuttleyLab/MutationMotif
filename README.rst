|Build Status| |gap| |codecov| |gap| |Using Black Formatting| |gap| |Python 3.6+|

.. |Build Status|  image:: https://github.com/HuttleyLab/MutationMotif/workflows/CI/badge.svg?branch=develop
 :target: https://github.com/HuttleyLab/MutationMotif/actions?workflow=CI
 :alt: CI Status
.. |codecov|  image:: https://codecov.io/gh/HuttleyLab/MutationMotif/branch/develop/graph/badge.svg
  :target: https://codecov.io/gh/HuttleyLab/MutationMotif
.. |Using Black Formatting| image:: https://img.shields.io/badge/code%20style-black-000000.svg
.. |Python 3.6+| image:: https://img.shields.io/badge/python-3.6+-blue.svg
    :target: https://www.python.org/downloads/release/python-360/
.. |gap| unicode:: 0xA0

.. image:: images/grid.svg

##############
Mutation Motif
##############

This library provides capabilities for analysis of mutation properties. Two different analysis approaches are supported: (1) log-linear analysis of neighbourhood base influences on mutation coupled with a sequence logo like representation of influences (illustrated above); (2) log-linear analysis of mutation spectra, the relative proportions of different mutation directions from a starting base. A logo-like visualisation of the latter is also supported.

The models and applications of them are described in `Zhu, Neeman, Yap and Huttley 2017 Statistical methods for identifying sequence motifs affecting point mutations <https://www.ncbi.nlm.nih.gov/pubmed/27974498>`_.

************
Installation
************

We recommend installation of dependencies via conda since creating image files using `Plotly <https://plot.ly/python/>`_ requires a command line tool plus you also need to have the python bindings to `R installed`_. Follow the `miniconda install instructions <https://docs.conda.io/en/latest/miniconda.html>`_ for your platform.

Having installed miniconda, the following command creates a new conda environment ``myenv`` into which we install the essential requirements using conda, then use pip to install ``mutation_motif``.

::

    $ conda env create -n myenv -c plotly python=3 plotly plotly-orca rpy2
    $ conda activate myenv
    $ python -m pip install git+https://github.com/HuttleyLab/MutationMotif.git@develop#egg=mutation_motif

.. note:: The above installs the developer version. To use the release, change ``develop`` to ``master``.

.. _`R installed`: https://rpy2.readthedocs.io/en/latest/overview.html#installation

*****
Usage
*****

The primary tool is installed as a command line executable, ``mutation_analysis``. It requires a counts table where the table contains counts for a specified flank size (maximum of 2 bases, presumed to be either side of the mutated base). It assumes the counts all reflect a specific mutation direction (e.g. A to G) and that counts from a control distribution are also included. Two subcommands are available: ``nbr`` and ``spectra``. The first examines the influence of neighbouring bases up to fourth order interactions. The latter contrasts the mutations from specified starting bases between groups.

Data processing command line tools are ``aln_to_counts`` and ``all_counts``. The first converts a fasta formatted alignment of equal length sequences to the required counts table format. The latter combines the separate counts tables into a larger table suitable for spectra analyses.

Visualisation of mutation motifs, or mutation spectra, in a grid is provided by ``mutation_draw`` with ``nbr_grid`` and ``spectra_grid`` subcommands.

To see the options for the above commands do, for example::

    $ mutation_analysis --help
    $ aln_to_counts --help

Counts table format
===================

The counts table format has a simple structure, illustrated by the following:

.. csv-table::
    :header: count,pos0,pos1,pos2,pos3,mut
    
    5663, C, T, T, T, M
    2639, G, C, A, T, M
    2425, G, C, A, G, M
    ...,...,...,...,...,...
    882, G, G, G, T, R
    6932, A, G, T, G, R
    10550, A, A, A, A, R
    
The mutation status **must** be indicated by ``R`` (reference) and ``M`` (mutated). In this instance, the flank size is 2 and mutation was between ``pos1`` and ``pos2``. Tables with this format are generated by ``aln_to_counts``.

Sequence file format
====================

At present, the code reads in a fasta formatted file where each sequence has identical length. The length is an odd number and the mutation occurred at the middle base. The application assumes each sequence file contains sequences that experienced the same point mutation at this central position.

***********************************************
Evaluating the effect of neighbours on mutation
***********************************************

Sample data files are included as ``tests/data/counts-CtoT.txt`` and ``tests/data/counts-CtoT-ss.txt`` with the latter being appropriate for analysis of the occurrence of strand asymmetric neighbour effects.

The simple analysis is invoked as::
    
    $ mutation_analysis nbr -1 path/to/tests/data/counts-CtoT.txt -o path/for/results/

This will write 11 files into the results directory. Files such as ``1.pdf`` and ``2.pdf`` are the mutation motifs for the first and second order effects from the log-linear models. Files ending in ``.json`` contain the raw data used to produce these figures and may be used for subsequent analyses, such as generating grids of mutation motifs. The summary files summarises the full log-linear modelling hierarchy. The ``.log`` files track the command used to generate these files, including the input files and the settings used.

Testing for strand symmetry (or asymmetry) is done as::
    
    $ mutation_analysis nbr -1 path/to/tests/data/counts-CtoT.txt -o path/for/results/ --strand_symmetry

Similar output to the above is generated. The difference here is that the reference group for display are bases on the ``+`` strand.

If comparing between groups, such as chromosomal regions, then there are two separate counts files and the second count file is indicated using a ``-2`` command line option.

********************
Testing Full Spectra
********************

Testing for strand symmetry requires the combined counts file, produced using the provided ``all_counts`` script. A sample such file is included as ``tests/data/counts-combined.txt``. In this instance, a test of consistency in mutation spectra between strands is specified.

This analysis is run as::

    $ mutation_analysis spectra -1 path/to/tests/data/counts-combined.txt -o another/path/for/results/ --strand_symmetry

*******
Drawing
*******

The ``mutation_draw`` command provides support for drawing either spectra or neighbour mutation motif logos. The subcommands are:

- ``grid``: draws an arbitrary shaped grid of mutation motifs based on a config file
- ``nbr``: makes motifs for independent or higher order interactions
- ``nbr-matrix``: draws square matrix of sequence logo's from neighbour analysis
- ``spectra-grid``: draws logo from mutation spectra analysis
- ``mi``: draws conventional sequence logo, using MI
- ``export-cfg``: exports the sample config files to the nominated path

*******************
Interpreting logo's
*******************

If the plot is derived from a group comparison, the relative entropy terms (which specify the stack height, letter size and orientation) are taken from the mutated class belonging to group 1 (which is the counts file path assigned to the ``-1`` option). For example, if you specified ``-1 file_a.txt -2 file_b.txt``, then large upright letters in the display indicate an excess in the mutated class from ``file_a.txt`` relative to ``file_b.txt``.
